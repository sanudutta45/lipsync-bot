/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 .\public\models\ai-assistant.glb -o .\app\components\Avatar.jsx -r public 
*/
'use client'
import * as THREE from "three"
import React, { useContext, useEffect, useMemo, useRef, useState } from "react"
import { useAnimations, useFBX, useGLTF } from "@react-three/drei"
import { useControls } from "leva"
import { useFrame, useLoader } from "@react-three/fiber"
import { GLTF } from 'three-stdlib'
import { SpeechContext } from "@/context/SpeechProvider"

type GLTFResult = GLTF & {
  nodes: {
    EyeLeft: THREE.SkinnedMesh
    EyeRight: THREE.SkinnedMesh
    Wolf3D_Head: THREE.SkinnedMesh
    Wolf3D_Teeth: THREE.SkinnedMesh
    Wolf3D_Hair: THREE.SkinnedMesh
    Wolf3D_Body: THREE.SkinnedMesh
    Wolf3D_Outfit_Bottom: THREE.SkinnedMesh
    Wolf3D_Outfit_Footwear: THREE.SkinnedMesh
    Wolf3D_Outfit_Top: THREE.SkinnedMesh
    Hips: THREE.Bone
  }
  materials: {
    Wolf3D_Eye: THREE.MeshStandardMaterial
    Wolf3D_Skin: THREE.MeshStandardMaterial
    Wolf3D_Teeth: THREE.MeshStandardMaterial
    Wolf3D_Hair: THREE.MeshStandardMaterial
    Wolf3D_Body: THREE.MeshStandardMaterial
    Wolf3D_Outfit_Bottom: THREE.MeshStandardMaterial
    Wolf3D_Outfit_Footwear: THREE.MeshStandardMaterial
    Wolf3D_Outfit_Top: THREE.MeshStandardMaterial
  }
}

const corresponding = {
  0: "viseme_sil",
  1: "viseme_aa",
  2: "viseme_aa",
  3: "viseme_O",
  4: "viseme_E",
  5: "viseme_E",
  6: "viseme_I",
  7: "viseme_U",
  8: "viseme_O",
  9: "viseme_aa",
  10: "viseme_O",
  11: "viseme_RR",
  12: "viseme_E",
  13: "viseme_O",
  14: "viseme_nn",
  15: "viseme_SS",
  16: "viseme_nn",
  17: "viseme_nn",
  18: "viseme_FF",
  19: "viseme_DD",
  20: "viseme_kk",
  21: "viseme_PP"
}

export function Avatar(props: THREE.Group) {
  const { nodes, materials } = useGLTF("/models/ai-assistant.glb") as GLTFResult
  const { animations } = useGLTF("/animations/animation.glb")
  const [animation, setAnimation] = useState(
    animations.find(a => a.name === "idle") ? "idle" : animations[0].name
  )

  const group = useRef<THREE.Group>(null!)
  const { actions, mixer } = useAnimations(animations, group)


  const context = useContext(SpeechContext)

  const { loading, currentSpeech } = context


  useEffect(() => {
    actions[animation]?.reset().fadeIn(mixer.stats.actions.inUse === 0 ? 0 : 0.5).play()
    return () => {
      actions[animation]?.fadeOut(0.5)
    }
  }, [animation, actions])

  useFrame(() => {

    Object.values(corresponding).forEach(value => {
      nodes.Wolf3D_Head.morphTargetInfluences![
        nodes.Wolf3D_Head.morphTargetDictionary![value]
      ] = 0;
      nodes.Wolf3D_Teeth.morphTargetInfluences![
        nodes.Wolf3D_Teeth.morphTargetDictionary![value]
      ] = 0;
    })

    if (currentSpeech && currentSpeech.visemes && currentSpeech.audioPlayer) {
      for (let i = currentSpeech.visemes.length - 1; i >= 0; i--) {
        const viseme = currentSpeech.visemes[i];
        if (currentSpeech.audioPlayer.currentTime * 1000 >= viseme[0]) {
          nodes.Wolf3D_Head.morphTargetInfluences![
            nodes.Wolf3D_Head.morphTargetDictionary![corresponding[viseme[1]]]
          ] = 1;
          nodes.Wolf3D_Teeth.morphTargetInfluences![
            nodes.Wolf3D_Teeth.morphTargetDictionary![corresponding[viseme[1]]]
          ] = 1;

          break;
        }
      }
    }

  })

  return (
    <group {...props} dispose={null} ref={group}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
    </group>
  )
}

useGLTF.preload("/models/ai-assistant.glb")
